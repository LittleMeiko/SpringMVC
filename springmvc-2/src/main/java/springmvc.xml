<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	
	<!-- 配置自动扫描的包 -->
	<context:component-scan base-package="com.atguigu.springmvc" />
	
	<!-- 配置视图解析器 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- SpringMVC处理静态资源： 
		default-servlet-handler将在SpringMVC上下文中定义一个DefaultServletHttpRequestHandler，
		它会对进入DispatcherServlet的请求进行筛查，如果发现是没有经过映射的请求，就将该请求交由WEB应用服务器默认的
		Servlet进行处理。如果不是静态资源的请求，才由DispatcherServlet继续处理。
		
		一般WEB应用服务器默认的Servlet的名称都是default，若所用的WEB应用服务器的默认名称不是default，则需要通过
		default-servlet-name属性显示指定
	-->
	<mvc:default-servlet-handler />
	
	<mvc:annotation-driven conversion-service="conversionService"/>
	
	<!-- 配置ConversionService -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean"> 
		<property name="converters">
			<set>
				<ref bean="employeeConverter" />
			</set>
		</property>
	</bean>
	
	<!-- 配置国际化资源文件 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="i18n"></property>
	</bean>
	
	<mvc:interceptors>
		<!-- 配置自定义拦截器 -->
		<bean class="com.atguigu.springmvc.interceptors.FirstInterceptor"/>
		
		<!-- 配置拦截器(不)作用的路径 -->
		<mvc:interceptor>
			<mvc:mapping path="/emps" />			
			<bean class="com.atguigu.springmvc.interceptors.SecondInterceptor"></bean>
		</mvc:interceptor>
		
		<!-- 配置国际化页面拦截器（通过超链接选择语言那种）配置LocaleChangeInterceptor 
		主要用于获取请求中的locale信息，将其转为Locale对像，获取LocaleResolver对象    第一步： -->
		<bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
	</mvc:interceptors>
	
	<!-- 国际化页面配置（通过超链接选择语言那种)
	配置SessionLocaleResolver用于将Locale对象存储于Session中供后续使用(这里的Id只能用这个：localeResolver，否则会出问题)   第二步： -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>
	
	<!-- 
		<mvc:view-controller path="/i18n" view-name="i18n"/>
	 -->
	<mvc:view-controller path="/i18n2" view-name="i18n2"/>
	
	<!-- 配置MultipartResolver实现文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxUploadSize" value="1024"></property>
	</bean>
	
	<!-- SpringMVC处理异常的HandlerExceptionResolver的常用实现类四：SimpleMappingExceptionResolver
		对异常进行统一异常，并且跳转对应异常的页面
	-->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionAttribute" value="ex"></property>
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.ArrayIndexOutOfBoundsException">error</prop>
			</props>
		</property>
	</bean>
	
	<mvc:default-servlet-handler />
</beans>
